upstream loadbalancer {
    least_conn;  # Use the least connections load balancing method
    server node-service:3000;  # Points to your Node.js service
}

server {
    listen 80;  # Default HTTP port

    # Custom log format for detailed connection logging
    log_format upstreamlog '[$time_local] $remote_addr - $remote_user - $server_name to: $upstream_addr - $request - $status - upstream_response_time $upstream_response_time msec $msec request_time $request_time';
    access_log /var/log/nginx/access.log upstreamlog;

    location / {
        # Dynamic resolution of the DNS for the load balancer with each request
        set $backend "http://loadbalancer";
        proxy_pass $backend;

        proxy_http_version 1.1;  
        proxy_set_header Upgrade $http_upgrade;  # Ensures proper handling of WebSocket connections if needed
        proxy_set_header Connection "upgrade";  # Needed for WebSocket upgrading
        proxy_set_header Host $host;  # Pass the host header to the upstream server
        proxy_set_header X-Real-IP $remote_addr;  # Pass the real IP of the client
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;  # For logging IPs through proxy
        proxy_set_header X-Forwarded-Proto $scheme;  # Pass the used protocol (HTTP or HTTPS)
        proxy_set_header X-Forwarded-Host $host;  # Pass the host requested by client
        proxy_set_header X-Forwarded-Port $server_port;  # Pass server port
        proxy_cache_bypass $http_upgrade;  # Bypass cache on WebSocket upgrades or dynamic content
    }
}
